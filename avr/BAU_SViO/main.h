

#define DATA_OUT       7      // ???? ?
#define LOKCH_OUT      3      // ???? ?
#define CS_DATA_OUT    4      // ???? ?
#define RESET_DATA_OUT 5      // ???? ?
#define CLOCK_DATA_OUT 6      // ???? ?


/************************************************
	TIME BUFFERS
************************************************/
/*Джамперы*/
#define SIGNAL_J1 (PINC&BIT(2))
#define SIGNAL_J2 (PINC&BIT(1))
#define SIGNAL_J3 (PINC&BIT(0))
#define SIGNAL_J4 (PINF&BIT(0))
#define SIGNAL_J5 (PINF&BIT(1))
#define SIGNAL_BUT1 	(PINA&BIT(0)^BIT(0))
#define SIGNAL_BUT2 	(PINA&BIT(1)^BIT(1))
#define SIGNAL_JUMPER 	(PINA&BIT(2)^BIT(2))
// номера для антидребезговой буферезации входов
enum{
	N_SIGNAL_J1,
	N_SIGNAL_J2,
	N_SIGNAL_J3,
	N_SIGNAL_J4,
	N_SIGNAL_J5,
	N_SIGNAL_BUT1,
	N_SIGNAL_BUT2,
	N_SIGNAL_JUMPER,
	N_SIGNAL_BUF_COUNT
};
#define DEBOUNCE_TIME  1500

/*********************************************/

/*Джамперы*/
#define J1 (debounce[N_SIGNAL_J1])
#define J2 (debounce[N_SIGNAL_J2])
#define J3 (debounce[N_SIGNAL_J3])
#define J4 (debounce[N_SIGNAL_J4])
#define J5 (debounce[N_SIGNAL_J5])

#define DBUT1		(debounce[N_SIGNAL_BUT1])
#define DBUT2		(debounce[N_SIGNAL_BUT2])
//Перемычка для ПСИ на вагоне
#define TEST_JAMP	(debounce[N_SIGNAL_JUMPER])

#define LED_RUNN_ON	  	PORTG|=BIT(2)
#define LED_RUNN_OFF	PORTG&=~BIT(2)
#define LED_RUNN_SWITCH	PORTG^=BIT(2)


#define LED_ERR_ON	  	PORTG|=BIT(4)
#define LED_ERR_OFF	  	PORTG&=~BIT(4)
#define LED_ERR_SWITCH	PORTG^=BIT(4)

#define LED_SET_ON	  	PORTG|=BIT(3)
#define LED_SET_OFF	  	PORTG&=~BIT(3)
#define LED_SET_SWITCH	PORTG^=BIT(3)


enum{
	ENABLE_CAL,
	START_CAL,
	END_CAL,
	OUT_CAL
};


/*------------------------------------------------------------------------------------------------------------------
	карта адресов ЕЕПРОМ
---------------------------------------------------------------------------------------------------------------------*/
#define STARTING_ADDRES_P1	0x0000
#define STARTING_ADDRES_P2	0x001E
#define STARTING_ADDRES_DP	0x003C
#define ADDR_TUST  			0x0044
#define ADDR_VVK1			0x0045
#define ADDR_VVK2			0x0047
#define ADDR_MOTOA			0x0049
#define ADDR_MOTOM			0x004D
/*==============================================================================

FROM PD

==============================================================================*/
#define NumIT   60

// Регистр событий
#define Heating_End      0
#define Event_Led_SET    1
#define SendMSG          2      
#define ENA_DATA_ADC     3
#define EnaDispley       4
#define But_plus   7//6/*7*/
#define But_minus  5//7/*5*/
#define But_prog   6//5/*6*/

// Регистр EnaStandByInfo
#define WIEW             0 

//Описание регистра входов
#define CLOCK_DATA_IN   3  // Порт А
#define LOKCH_IN        0  // Порт А
#define RESET_DATA_IN   2  // Порт А
#define CS_DATA_IN      1  // Порт А
#define DATA_IN         4  // Порт В

/*#define DATA_OUT       5      // Порт В
#define LOKCH_OUT      4      // Порт А
#define CS_DATA_OUT    5      // Порт А
#define RESET_DATA_OUT 6      // Порт А
#define CLOCK_DATA_OUT 7      // Порт А
*/

// Управление последовательным интерфейсом
#define CS_PROC       6
#define IN_PROC       4
#define OUT_PROC      3
#define SCK_PROC      5

 
// Регистр кнопок ButtonReg
#define EnaBut_plus   0
#define EnaBut_minus  1
#define EnaBut_prog   2

#define FlagButP   4
// Описание порта G
#define Led_RUN      2
#define Led_SET      3
#define Led_ERR      4

// Описание регистра ошибок ErrorReg
#define Err_SET      0
/*==================================================================
 PROTOTYPES
*====================================================================*/
/*================================================================================
*	Запись в еепром моточасов  работы
*=================================================================================*/
void
Save_motoA(void);
/*=======================================================================================
*	Запись в еепром моточасов  работы блока в ручном режиме
*========================================================================================*/
void
Save_motoM(void);
/*======================================================================================
*	Увеличение счётчика 6 минут для подсчёта мотточасов работы блока
*	INPUT: 
*	 operation - код операции: 	0 - обнуление
*						1 - инкремент
*=======================================================================================*/
void
Set_motoa_time(uint8_t operation);

/*================================================================================
*	Увеличение счётчика 6 минут для подсчёта моточасов в ручном режиме
*	INPUT: 
*	 operation - код операции: 	0 - обнуление
*						1 - инкремент
*=================================================================================*/
void
Set_motom_time(uint8_t operation);
/*==================================================================
// расчёт антидребезга
// debounce_time - время задержки антидребезга  (мс)
*===================================================================*/
void 
checkbuf(uint8_t sig_num, uint8_t sig_val, uint8_t debounce_time);
/* ========================================================
* опрос и антидребезг для всех входов 
* вызывается по таймеру (1 ms)
* =========================================================*/
void 
check_pins(void);
/*============================================
Пользовательская функция, 
вызывается по прерыванию от таймера каждую мс
==============================================*/
void
Timer0_1ms_int(void);
/*============================================
Пользовательская функция, 
вызывается по прерыванию от таймера каждую секунду
==============================================*/
void
Timer0_1s_int(void);
/*================================================================
*	Установка 1го бита для регистора
*=================================================================*/
void 
SetBitForDataOut(uint16_t data);
/*====================================================================
*	индикация лампочек на морде посредством сдвигового регистра
*=====================================================================*/
void 
OutLed(uint8_t Led);
/*=============================================================================
*		ну тут и ежу понятно чё происходит ))
*=============================================================================*/
void port_init(void);
/*=====================================================================================
*	Основной обработчик прерываний от таймера
*======================================================================================*/
void 
on_timer(void);
/*===========================================================================
*	Пустая линия 
*============================================================================*/
void 
NopLine(void);
/*============================================================================
*	Модуль signed int
*=============================================================================*/
uint16_t 
Mod16(int16_t idata);
/*=============================================================================
*	 С помощью этой функции индицируется обрыв провода
*==============================================================================*/
void 
ErrorLine(void);
/*======================================================================
*	Переводим число в символы для отображения на второй строке
*=======================================================================*/
void 
LoadDataInLine(signed int Zdata);
/*==========================================================================
*	В зависимости от № экрана загружаем в видеопамять необходимые данные
*==========================================================================*/
void SelectScreen(void);
/*==========================================================================
*	Событие нажатия на кнопку
*===========================================================================*/
void 
OnClickButton(unsigned char button);
/*============================================================================
*	В зависимости от ошибок выбираем номер экрана
*=============================================================================*/
void 
LoadScreenError(void);
/*=============================================================================
*	Обработка продолжительного нажатия на кнопку "P"
*===============================================================================*/
void 
LochButP (void);
/*===============================================================================
*	Чтение температурных показаний
*================================================================================*/
void 
ReadDataADC(void);

/*================================================================================
*	Проверка валидности намерянных температур
*=================================================================================*/
void 
CheckDataADC(void);

/*Отправляем КАН сообщения*/
void 
SendCANPacketMessage(void);
/*=====================================================================
*	Принимаем и разбираем КАН сообщения
*======================================================================*/
void 
ReciveCAN (void);
/*=======================================================================
*  Считываем кнопки 
*========================================================================*/
void
ReadDataDIN(void);
/*============================================================================
*	Чтение чего там намерялось по  измерительным каналам заслонок
*=============================================================================*/
void
Read_DamperIN(void);
/*==============================================================================
*	Выставляет управляющие сигналы для заслонок.
*===============================================================================*/
void
Write_DamperOUT(void);
/*==============================================================================
*	Функция реализации пилы на выходе ЦАПов
*================================================================================*/
void 
Saw(void);
/*=====================================================================================
*	функция стирания калибровочных данных
*=======================================================================================*/
void 
Clear_Calibrate(void);
/*=====================================================================================
*	Инициализация CAN
*=====================================================================================*/
void 
CAN_SetUp(void);
/*=====================================================================================
*	Инициализация периферии
*=====================================================================================*/
void
Init_Periphery(void);
/* =====================================================================================
*	Работа с калибровкой
*=====================================================================================*/
void 
Do_Load_Or_Clear_Calibrate(void);
/*=====================================================================================
*	Загрузка значений срабатываний контакт.
*=====================================================================================*/
void
Load_Count_VVK(void);
/*=====================================================================================
* Загрузка моточасов из памяти
*=====================================================================================*/
void
LoadMotoTime(void);
